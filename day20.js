/*
--- Day 20: Jurassic Jigsaw ---
The high-speed train leaves the forest and quickly carries you south. You can even see a desert in the distance! Since you have some spare time, you might as well see if there was anything interesting in the image the Mythical Information Bureau satellite captured.

After decoding the satellite messages, you discover that the data actually contains many small images created by the satellite's camera array. The camera array consists of many cameras; rather than produce a single square image, they produce many smaller square image tiles that need to be reassembled back into a single image.

Each camera in the camera array returns a single monochrome image tile with a random unique ID number. The tiles (your puzzle input) arrived in a random order.

Worse yet, the camera array appears to be malfunctioning: each image tile has been rotated and flipped to a random orientation. Your first task is to reassemble the original image by orienting the tiles so they fit together.

To show how the tiles should be reassembled, each tile's image data includes a border that should line up exactly with its adjacent tiles. All tiles have this border, and the border lines up exactly when the tiles are both oriented correctly. Tiles at the edge of the image also have this border, but the outermost edges won't line up with any other tiles.

For example, suppose you have the following nine tiles:
*/
var day20test = [
'Tile 2311:',
'..##.#..#.',
'##..#.....',
'#...##..#.',
'####.#...#',
'##.##.###.',
'##...#.###',
'.#.#.#..##',
'..#....#..',
'###...#.#.',
'..###..###',
'',
'Tile 1951:',
'#.##...##.',
'#.####...#',
'.....#..##',
'#...######',
'.##.#....#',
'.###.#####',
'###.##.##.',
'.###....#.',
'..#.#..#.#',
'#...##.#..',
'',
'Tile 1171:',
'####...##.',
'#..##.#..#',
'##.#..#.#.',
'.###.####.',
'..###.####',
'.##....##.',
'.#...####.',
'#.##.####.',
'####..#...',
'.....##...',
'',
'Tile 1427:',
'###.##.#..',
'.#..#.##..',
'.#.##.#..#',
'#.#.#.##.#',
'....#...##',
'...##..##.',
'...#.#####',
'.#.####.#.',
'..#..###.#',
'..##.#..#.',
'',
'Tile 1489:',
'##.#.#....',
'..##...#..',
'.##..##...',
'..#...#...',
'#####...#.',
'#..#.#.#.#',
'...#.#.#..',
'##.#...##.',
'..##.##.##',
'###.##.#..',
'',
'Tile 2473:',
'#....####.',
'#..#.##...',
'#.##..#...',
'######.#.#',
'.#...#.#.#',
'.#########',
'.###.#..#.',
'########.#',
'##...##.#.',
'..###.#.#.',
'',
'Tile 2971:',
'..#.#....#',
'#...###...',
'#.#.###...',
'##.##..#..',
'.#####..##',
'.#..####.#',
'#..#.#..#.',
'..####.###',
'..#.#.###.',
'...#.#.#.#',
'',
'Tile 2729:',
'...#.#.#.#',
'####.#....',
'..#.#.....',
'....#..#.#',
'.##..##.#.',
'.#.####...',
'####.#.#..',
'##.####...',
'##..#.##..',
'#.##...##.',
'',
'Tile 3079:',
'#.#.#####.',
'.#..######',
'..#.......',
'######....',
'####.#..#.',
'.#...#.##.',
'#.#####.##',
'..#.###...',
'..#.......',
'..#.###...',
];
/*
By rotating, flipping, and rearranging them, you can find a square arrangement that causes all adjacent borders to line up:

#...##.#.. ..###..### #.#.#####.
..#.#..#.# ###...#.#. .#..######
.###....#. ..#....#.. ..#.......
###.##.##. .#.#.#..## ######....
.###.##### ##...#.### ####.#..#.
.##.#....# ##.##.###. .#...#.##.
#...###### ####.#...# #.#####.##
.....#..## #...##..#. ..#.###...
#.####...# ##..#..... ..#.......
#.##...##. ..##.#..#. ..#.###...

#.##...##. ..##.#..#. ..#.###...
##..#.##.. ..#..###.# ##.##....#
##.####... .#.####.#. ..#.###..#
####.#.#.. ...#.##### ###.#..###
.#.####... ...##..##. .######.##
.##..##.#. ....#...## #.#.#.#...
....#..#.# #.#.#.##.# #.###.###.
..#.#..... .#.##.#..# #.###.##..
####.#.... .#..#.##.. .######...
...#.#.#.# ###.##.#.. .##...####

...#.#.#.# ###.##.#.. .##...####
..#.#.###. ..##.##.## #..#.##..#
..####.### ##.#...##. .#.#..#.##
#..#.#..#. ...#.#.#.. .####.###.
.#..####.# #..#.#.#.# ####.###..
.#####..## #####...#. .##....##.
##.##..#.. ..#...#... .####...#.
#.#.###... .##..##... .####.##.#
#...###... ..##...#.. ...#..####
..#.#....# ##.#.#.... ...##.....
For reference, the IDs of the above tiles are:

1951    2311    3079
2729    1427    2473
2971    1489    1171
To check that you've assembled the image correctly, multiply the IDs of the four corner tiles together. If you do this with the assembled tiles from the example above, you get 1951 * 3079 * 2971 * 1171 = 20899048083289.

Assemble the tiles into an image. What do you get if you multiply together the IDs of the four corner tiles?
*/
function getEdges(tileContent) {
  var edges = [];
  var n = tileContent[0];
  edges.push(n);
  var e = tileContent.map(l => l[l.length-1]).join('');
  edges.push(e);
  var s = tileContent[tileContent.length-1];
  edges.push(s);
  var w = tileContent.map(l => l[0]).join('');
  edges.push(w);
  return edges;
}
console.assert(getEdges(['ab','12']).join() === 'ab,b2,12,a1');

function parseTiles(input) {
  var tileContentMap = new Map(); // id -> tile grid
  var id;
  var tile;
  for (const line of input) {
    if (line.startsWith('Tile ')) {
      tile = [];
      id = parseInt(line.substring(5));
    } else if (line !== '') {
      tile.push(line);
    } else {
      tileContentMap.set(id, tile);
    }
  }
  tileContentMap.set(id, tile); // flush tile buffer if no trailing newline
  return tileContentMap;
}

function makeTileEdgesMap(tileContentMap) {
  var tileEdgesMap = new Map(); // id -> [ edge strings N, -N, E, -E, S, -S, W, -W ]
  for (var [tileId, content] of tileContentMap.entries()) {
    var edges = getEdges(content);
    tileEdgesMap.set(tileId, edges.concat(edges.map(e => e.reverse())));
  }
  return tileEdgesMap;
}
var testTileContent = parseTiles(day20test);
var testTileEdges = makeTileEdgesMap(testTileContent);
console.assert(testTileEdges.size === 9);

function countEdges(tileEdgesMap) {
  var edgeTilesMap = new Map(); // edge -> Set( tile ids )
  for (var [tile, edges] of tileEdgesMap.entries()) {
    for (var edge of edges) {
      var s;
      if (edgeTilesMap.has(edge)) {
        s = edgeTilesMap.get(edge);
      } else {
        s = new Set();
        edgeTilesMap.set(edge, s);
      }
      s.add(tile);
    }
  }
  return edgeTilesMap;
}
var testEdgeTiles = countEdges(testTileEdges);
console.assert(testEdgeTiles.size === 48);

function isCorner(tileId, tileEdgesMap, edgeTilesMap) {
  var edges = tileEdgesMap.get(tileId);
  var matchedEdges = edges.map(e => edgeTilesMap.get(e).size > 1);
  var matchedSides = 0;
  for (var side = 0; side < 4; side++) {
    if (matchedEdges[side] || matchedEdges[side+4]) {
      matchedSides++;
    }
    if (matchedSides > 2) {
      return false;
    }
  }
  return true;
}
console.assert(isCorner(1951, testTileEdges, testEdgeTiles));
console.assert(!isCorner(2311, testTileEdges, testEdgeTiles));

function cornerProduct(input) {
  var tileEdgesMap = makeTileEdgesMap(parseTiles(input));
  var edgeTilesMap = countEdges(tileEdgesMap);
  return [...tileEdgesMap.keys()]
    .filter(k=>isCorner(k, tileEdgesMap, edgeTilesMap))
    .reduce((acc, cur) => (acc * cur), 1);
}
console.assert(cornerProduct(day20test) === 20899048083289);

var day20input = [
'Tile 1249:',
'...#......',
'#..#..#.##',
'##........',
'#.#.......',
'..........',
'#...###...',
'#..#......',
'#...##....',
'..........',
'.....#...#',
'',
'Tile 1693:',
'..#..####.',
'#.........',
'##..#....#',
'#.....#..#',
'......#.##',
'#........#',
'.....##...',
'.#..##.#.#',
'##........',
'###..#....',
'',
'Tile 1481:',
'....#####.',
'#....#..##',
'##..#....#',
'##..#...#.',
'#..#.#...#',
'..........',
'...#..#...',
'.#...#...#',
'#...#.....',
'..#..##.##',
'',
'Tile 3169:',
'####...#.#',
'#.#.....#.',
'.#......##',
'..#.#....#',
'...###..#.',
'#....###.#',
'.......#..',
'##.##.....',
'.#.#......',
'.#....#...',
'',
'Tile 1229:',
'##..###..#',
'#.......#.',
'..#..##..#',
'##..#.....',
'#.#..#..#.',
'.#..#.#.##',
'....#....#',
'#..#..#.##',
'....#....#',
'..##..####',
'',
'Tile 1489:',
'#......#..',
'....#.....',
'#.....#..#',
'#.......#.',
'#.#..#..#.',
'#.........',
'#........#',
'#..#.#....',
'#.........',
'....####.#',
'',
'Tile 2477:',
'#####.##.#',
'.###...###',
'#....#..##',
'.#.#..#..#',
'###.##...#',
'#........#',
'#..#..#...',
'.......#.#',
'#......###',
'##.##.##.#',
'',
'Tile 2897:',
'##.##..#.#',
'#.......##',
'#.#..#.#..',
'..#...#..#',
'...##.#..#',
'..#.......',
'#.#..##..#',
'..#....#.#',
'#....#.#.#',
'#......###',
'',
'Tile 2083:',
'..#...##.#',
'###.#.##..',
'....##....',
'#...#..#..',
'...##....#',
'#..#......',
'.#.##.....',
'..##..####',
'....###..#',
'.#...#.#..',
'',
'Tile 1069:',
'..#.#.#..#',
'..#....#.#',
'.........#',
'##..#.....',
'#.....#...',
'..##......',
'#..#......',
'.##..#####',
'#.#....#..',
'.....#..#.',
'',
'Tile 1427:',
'...####.##',
'.###......',
'.#..#.#..#',
'..#.###.##',
'.#..#.....',
'..##.#....',
'.#......#.',
'#....#...#',
'.......#..',
'#.#..###..',
'',
'Tile 1429:',
'.##.#.#.#.',
'#..##....#',
'..#......#',
'...#....##',
'...#.##..#',
'..#.#.....',
'#....#..##',
'#..#.....#',
'.##....#..',
'##.#.#...#',
'',
'Tile 2357:',
'#.##..#.##',
'.........#',
'#..#.#..##',
'#....#.#..',
'#........#',
'#...##....',
'#....#....',
'....##...#',
'#.#..##...',
'.###.#.#..',
'',
'Tile 3181:',
'...#..####',
'........#.',
'#...#...##',
'#.#.....##',
'#.........',
'##...#....',
'#.##.....#',
'#....#...#',
'..#.#...##',
'#..###.##.',
'',
'Tile 2887:',
'.#..#.###.',
'#.........',
'.#....#...',
'#........#',
'..#.##...#',
'.......##.',
'....#.#..#',
'#...###..#',
'.#...#..##',
'###...#..#',
'',
'Tile 2837:',
'##.##..###',
'.......#.#',
'....#.#..#',
'.......##.',
'.....#....',
'#.#.##..#.',
'#.#..#...#',
'....#.##..',
'..#......#',
'...######.',
'',
'Tile 2539:',
'.###....#.',
'.......##.',
'##.##...#.',
'.###.....#',
'###..##...',
'.##....#.#',
'........#.',
'..........',
'.#........',
'#.....#...',
'',
'Tile 2399:',
'##.#..##..',
'#...#.#..#',
'.##......#',
'###..##...',
'.#....#...',
'....#.#...',
'.....###.#',
'#.......##',
'#......#..',
'.##.##....',
'',
'Tile 2383:',
'#..##.###.',
'.#.......#',
'#.#..#....',
'#..#.#...#',
'#.#.#.....',
'......#...',
'#....#..#.',
'..#.#.#..#',
'#..#.##..#',
'.#.##...##',
'',
'Tile 2521:',
'.#..#.##.#',
'#........#',
'#.#...#.##',
'#........#',
'##.#.#..##',
'#..######.',
'.##..##..#',
'.#.....##.',
'.#.#......',
'..#..#####',
'',
'Tile 1823:',
'#.#...##..',
'#..#.....#',
'.##......#',
'#...###.#.',
'......#...',
'.....##...',
'#....##.#.',
'#.........',
'#..#.....#',
'#.#.##.#..',
'',
'Tile 1301:',
'####.#.###',
'#.##...##.',
'..#...####',
'..........',
'#....#..##',
'....#..#..',
'#..#.#.#..',
'...#...#..',
'###..###.#',
'.##..#.#.#',
'',
'Tile 1289:',
'#.###....#',
'#.#.....#.',
'#.....##.#',
'#........#',
'.##.#...#.',
'.###..#...',
'..#.......',
'.##...#...',
'...#....##',
'.###....#.',
'',
'Tile 3823:',
'#.##.##..#',
'.........#',
'#...##.#.#',
'.#.##.....',
'##.....#..',
'.#..#....#',
'#...#...##',
'#.........',
'#........#',
'.#.##.####',
'',
'Tile 2411:',
'#.####.###',
'#....#.###',
'..##.....#',
'#.#...#..#',
'##...#.#.#',
'##.##...##',
'#.......#.',
'#...##...#',
'.........#',
'###.##.##.',
'',
'Tile 1039:',
'.......#.#',
'..#.......',
'........#.',
'.##...####',
'##...#..##',
'.#.......#',
'..#.#.....',
'...#.....#',
'.........#',
'..#...#...',
'',
'Tile 1609:',
'.##..#..##',
'##.###.###',
'.#.....#..',
'#........#',
'...#...#..',
'#.......##',
'...#..###.',
'#.##.##.##',
'#.......#.',
'...#.#....',
'',
'Tile 2017:',
'##..#..#..',
'....###...',
'..##......',
'#...#.###.',
'#....#....',
'#.#.......',
'#..#.#....',
'###..##..#',
'###.#....#',
'#.#.#.#.##',
'',
'Tile 3301:',
'.#####...#',
'...##.....',
'#..###...#',
'#....#...#',
'...#.#...#',
'#......#.#',
'#........#',
'...#......',
'.......#.#',
'..#####...',
'',
'Tile 3733:',
'#####.##.#',
'#.##..#..#',
'#....#..##',
'#....#....',
'.....##...',
'#......#..',
'#....##.##',
'.........#',
'.#..#....#',
'.....##...',
'',
'Tile 2309:',
'#..##.##..',
'...#.#.#.#',
'#..##.#..#',
'....##....',
'##....#..#',
'##..##.#.#',
'.###....#.',
'###...#.##',
'....#.....',
'.#.#.###.#',
'',
'Tile 2879:',
'#.##.##...',
'...#.....#',
'...##.####',
'...#.#.#.#',
'#.###.##.#',
'.....#...#',
'#.....#.#.',
'#..#.#..##',
'.....###..',
'.##..#.###',
'',
'Tile 3583:',
'.#.##...#.',
'..##...##.',
'#.#....##.',
'#.##...#.#',
'.....#..##',
'#####.....',
'..###..#..',
'..##..#.#.',
'.##....##.',
'##.##...#.',
'',
'Tile 2153:',
'##...####.',
'..#.#...#.',
'##..##..#.',
'.#..#.#...',
'..........',
'..#...#...',
'#....#.###',
'...##....#',
'#.##.....#',
'#...#....#',
'',
'Tile 3581:',
'#...##.###',
'..####..##',
'...##....#',
'.#..#.....',
'.##......#',
'#.#......#',
'...###.#.#',
'###.#.....',
'#.##.##...',
'#.#.....#.',
'',
'Tile 2927:',
'##.#.#..##',
'..........',
'..........',
'.....#....',
'#..#..#..#',
'....#.#...',
'.#...#...#',
'.#...##..#',
'......#...',
'###.#.##.#',
'',
'Tile 2861:',
'.#..#.###.',
'#..#....##',
'#.#.#..#..',
'........#.',
'..#.#.#...',
'...##....#',
'#..###.#.#',
'#..#..##..',
'..#.#....#',
'.#..####.#',
'',
'Tile 2851:',
'#.#....#..',
'#........#',
'.#........',
'#..##.#...',
'..##....##',
'.#.......#',
'#.........',
'......#..#',
'..........',
'###.##..##',
'',
'Tile 3319:',
'...##....#',
'#.......##',
'##.#..#...',
'.##....###',
'#...#...##',
'..#.......',
'.###..#..#',
'#...#.....',
'.........#',
'.#..##.#..',
'',
'Tile 2143:',
'...#......',
'##.#...#.#',
'##.......#',
'#.##..#..#',
'..#...#..#',
'.#.#...#..',
'..#....#..',
'......#...',
'#.#.......',
'#..#..#.##',
'',
'Tile 1093:',
'#.#...#.#.',
'##..#.....',
'.........#',
'##..#...##',
'##..#..#..',
'##..##....',
'##.##....#',
'#.#....#..',
'.#.#..#..#',
'..#.##.###',
'',
'Tile 3391:',
'#....#..#.',
'#...#..#..',
'##....##..',
'..#.#..#.#',
'#####...##',
'..#..#...#',
'#.#......#',
'.#...#....',
'.....##.##',
'.#.#.#....',
'',
'Tile 3917:',
'...##.#...',
'#..#.....#',
'#..##.###.',
'#.#..#..#.',
'.####..#.#',
'..##.#.###',
'#.#..##.#.',
'#....##..#',
'..###.#..#',
'..##.####.',
'',
'Tile 1847:',
'#.##.#..#.',
'.#.##.....',
'#.#..#..#.',
'#....#.#..',
'.#.......#',
'..#..#.#.#',
'..##....##',
'#.#.##....',
'##.#..#...',
'.##.##.###',
'',
'Tile 1667:',
'.##..#..#.',
'###....##.',
'#.####.#.#',
'...#.....#',
'.#.#..##.#',
'.#..#....#',
'#.##.#...#',
'#.#.#.....',
'...###...#',
'#.#..####.',
'',
'Tile 1217:',
'...#####..',
'....#..#.#',
'..#...####',
'#........#',
'#........#',
'###..#...#',
'.##.##...#',
'.#.......#',
'.....##...',
'.##.#.###.',
'',
'Tile 3467:',
'###.##....',
'.......#.#',
'.....#..##',
'##..#....#',
'....#..#..',
'....#..###',
'#......###',
'#.##...#..',
'..#.....##',
'...#.#..#.',
'',
'Tile 1297:',
'..###..##.',
'#....#.#.#',
'.........#',
'###.#....#',
'#......#.#',
'##....##..',
'#.#.##..##',
'.##.....#.',
'.....#...#',
'.#.##.....',
'',
'Tile 3877:',
'..###.#...',
'##..#....#',
'###.##..##',
'.#..######',
'....#.#..#',
'.#.......#',
'#...##.#..',
'..#..#....',
'#.##.##..#',
'#..##.#.#.',
'',
'Tile 2389:',
'##...#####',
'##..#.#..#',
'#..#.....#',
'......#..#',
'.#........',
'#....##.#.',
'.##....#..',
'#.....#.#.',
'#........#',
'...##.#...',
'',
'Tile 3361:',
'.....#.#..',
'.........#',
'...#....#.',
'##.##.....',
'#....##...',
'##...#...#',
'#...####.#',
'..##.....#',
'...#...#.#',
'###.####..',
'',
'Tile 2207:',
'###.##..#.',
'#..###....',
'......#..#',
'#........#',
'##....##.#',
'........#.',
'...#..#...',
'#....#..##',
'...####...',
'##........',
'',
'Tile 1997:',
'..#.#..###',
'......#...',
'...#...#..',
'..#......#',
'.........#',
'#....#...#',
'....#..#..',
'.....#....',
'#........#',
'#....#####',
'',
'Tile 1063:',
'#.#...##..',
'.##..#....',
'#.#..##...',
'..#...####',
'......##..',
'#...#.#...',
'####......',
'.#.....#..',
'.#.......#',
'#...####..',
'',
'Tile 3109:',
'...###.###',
'.......#..',
'......##.#',
'.#......##',
'#..##..#..',
'##..#..#.#',
'.....##.##',
'#....#.#.#',
'.....###..',
'####....#.',
'',
'Tile 1097:',
'#####.##..',
'.#...#.##.',
'..#..#....',
'#..#....#.',
'#.#....#.#',
'.#...#.#.#',
'#....#..##',
'#....#...#',
'...#...#..',
'...#.#..#.',
'',
'Tile 1117:',
'#..##.#.##',
'#.#.....#.',
'...#.#...#',
'#.#..##.#.',
'#.###..#..',
'#....#...#',
'....#.....',
'.#...#...#',
'..##..#..#',
'.#.#.....#',
'',
'Tile 2551:',
'.#..#.####',
'#...#.....',
'##....##.#',
'#....#....',
'.##.....#.',
'.#...#....',
'#....#.#..',
'......#...',
'##.#.#....',
'.#....#..#',
'',
'Tile 2677:',
'.#.####..#',
'#.#.....##',
'...#.#....',
'.#...#...#',
'.##...#..#',
'##....#...',
'...##.#..#',
'##...#..##',
'##...#...#',
'##...###.#',
'',
'Tile 1367:',
'.#.##...##',
'#.#..#....',
'....##.#..',
'.........#',
'.#....##.#',
'....#.##..',
'....##...#',
'#.#..#...#',
'#.#.#..##.',
'....#.##.#',
'',
'Tile 1913:',
'.##..#..##',
'.#...##.##',
'..#.....#.',
'......#...',
'...#...##.',
'...####...',
'..#..#....',
'....#.#...',
'#.........',
'.####.####',
'',
'Tile 1709:',
'.#....##..',
'..#...#.##',
'.#......#.',
'...#....##',
'.#.##...#.',
'.#.#.#.###',
'.........#',
'#.......#.',
'##....#...',
'..#.##.###',
'',
'Tile 1459:',
'.##..#.#..',
'...##.....',
'.#.#...###',
'...#.....#',
'##..#..#.#',
'.........#',
'.........#',
'....#...#.',
'#..#......',
'...#.#...#',
'',
'Tile 2137:',
'##..#....#',
'#.#####.#.',
'......#..#',
'#.#......#',
'#...#..#.#',
'#..#..#.##',
'###..####.',
'.##..#...#',
'#.#.......',
'.##.##....',
'',
'Tile 2659:',
'#.##..#...',
'#...##....',
'#...#...#.',
'#........#',
'#....#....',
'.......##.',
'..#.....#.',
'#.#..##..#',
'#......#..',
'..###.#..#',
'',
'Tile 2657:',
'####...##.',
'........#.',
'..####..#.',
'..#.......',
'....#.#..#',
'#.#.#.#...',
'...#....#.',
'###...####',
'........##',
'##.#.#.#..',
'',
'Tile 2099:',
'#.###.##.#',
'#..#...###',
'..#......#',
'.#...#.#..',
'...##.....',
'###.##...#',
'..##..#...',
'...#......',
'..#.#.#.#.',
'..#.##....',
'',
'Tile 3209:',
'##.###....',
'...#....#.',
'#..##..##.',
'##.##.#...',
'.#..#....#',
'#..#.#...#',
'.#...#...#',
'#..#......',
'...#......',
'..#.#.###.',
'',
'Tile 1879:',
'#.##.#.##.',
'.#.##.#...',
'#..#.#....',
'#.....###.',
'#..##.....',
'....##....',
'#..#..#...',
'#.........',
'..#.##....',
'...####.##',
'',
'Tile 1621:',
'###....#.#',
'.........#',
'.#....##..',
'.....#.#..',
'.#...#.#..',
'##...####.',
'.....#...#',
'#.........',
'....#.#..#',
'.####...##',
'',
'Tile 3931:',
'.####.###.',
'#.##.....#',
'#..#.#...#',
'..#......#',
'###..#.##.',
'....##....',
'#..#......',
'..........',
'.#.....#.#',
'#.##.#..##',
'',
'Tile 2777:',
'##....####',
'.#.#......',
'##......#.',
'#.......##',
'.#..#.#..#',
'##.#...#.#',
'##.#.....#',
'...##....#',
'#..#.#....',
'#.#..#....',
'',
'Tile 2909:',
'#......##.',
'#........#',
'..#.#.###.',
'.......#.#',
'........##',
'....#.....',
'......#...',
'#........#',
'#.......#.',
'......#.#.',
'',
'Tile 1777:',
'.##...####',
'.##.....#.',
'#..#.#..#.',
'.#......##',
'.#....#..#',
'#.###.#...',
'.#.#......',
'###..#...#',
'.#.......#',
'..#...#.##',
'',
'Tile 3251:',
'...#.###..',
'#....##..#',
'#....#..#.',
'#....#..##',
'.....#...#',
'#.......##',
'.......#.#',
'#....#..#.',
'#...##...#',
'.#.#.....#',
'',
'Tile 1601:',
'#....#....',
'.##.##...#',
'.........#',
'#.........',
'.#.....###',
'#..##.#.#.',
'#......#.#',
'.#..#.#..#',
'.#...#....',
'.#.#.#..##',
'',
'Tile 1283:',
'#####.#..#',
'..#....##.',
'#..#......',
'.#....##..',
'.#.#.....#',
'##......##',
'#.....##..',
'##..#....#',
'#........#',
'.#.###..##',
'',
'Tile 3079:',
'..#.##....',
'.......#.#',
'..#...##.#',
'..###...#.',
'#..#.....#',
'..##.....#',
'..#..#.#..',
'.##.#.#..#',
'#..#......',
'.#.##..#..',
'',
'Tile 3793:',
'##..#####.',
'##...#....',
'##....#...',
'..........',
'#.........',
'.#....#..#',
'#....#..#.',
'#....#....',
'###..##...',
'#.###.##..',
'',
'Tile 3037:',
'.##.#..##.',
'#..#.###..',
'.#....#...',
'...####..#',
'..#.###..#',
'#.#..#....',
'.##......#',
'#.....#..#',
'#...#.#...',
'##.######.',
'',
'Tile 1669:',
'##.#......',
'.#......#.',
'##.#...#.#',
'#.#.#.#..#',
'##........',
'##....#...',
'#.#.....#.',
'..........',
'.........#',
'####...###',
'',
'Tile 1087:',
'.###.#.#.#',
'###.......',
'.....#...#',
'##.....#..',
'.#.#......',
'...#......',
'#...#..#.#',
'#........#',
'#..#....##',
'.#...#####',
'',
'Tile 2617:',
'.##..#.#..',
'.....#...#',
'..#.#.....',
'....#...##',
'####...##.',
'..##......',
'...#...#..',
'..#.#.##.#',
'#.#.......',
'###.##....',
'',
'Tile 3943:',
'.#.####..#',
'.........#',
'#.........',
'.#........',
'###..#....',
'...#....#.',
'#...#.#...',
'.#......#.',
'...##.#...',
'..##....#.',
'',
'Tile 2273:',
'##.#.#...#',
'...##.#..#',
'..##......',
'..#.....#.',
'#......#..',
'...#....#.',
'.##....#.#',
'...#.#.#..',
'#..###.#.#',
'###.#..##.',
'',
'Tile 3803:',
'##....#..#',
'##...#.#.#',
'..##....#.',
'#...#..###',
'....#.....',
'....#.####',
'#.....##..',
'##....###.',
'#....#..##',
'#####.##..',
'',
'Tile 1697:',
'....####.#',
'#....#.#.#',
'#.....#.##',
'#......#..',
'#.#...#...',
'#....#.#..',
'.##....#..',
'##...#.#.#',
'#.#..#..#.',
'.......#..',
'',
'Tile 3343:',
'######.#..',
'#....##...',
'#.#.##...#',
'#...####..',
'#......#..',
'##.#..##.#',
'#.....##.#',
'..##.##..#',
'..#......#',
'###..##...',
'',
'Tile 1549:',
'#.##.###.#',
'.....###..',
'...#.###..',
'##...##..#',
'#.#.......',
'#.........',
'....#....#',
'..#.....##',
'.....##...',
'#.#.##.##.',
'',
'Tile 1619:',
'..###.###.',
'##.###...#',
'#...##...#',
'....##...#',
'..##..#.#.',
'#...#.#..#',
'#.......##',
'#..#.....#',
'....##...#',
'.#...#.#..',
'',
'Tile 2971:',
'..##.###..',
'#.....#..#',
'#..#.....#',
'#..#...#.#',
'...#......',
'#......###',
'#....####.',
'.#....#...',
'...#.....#',
'#...###..#',
'',
'Tile 3617:',
'####...#..',
'.......#.#',
'.#.#......',
'#..##..###',
'.##.......',
'.#....#..#',
'.....#.###',
'....##.#..',
'#....#...#',
'.#.##.####',
'',
'Tile 1543:',
'......#.##',
'#......#.#',
'##.....###',
'#...#...##',
'#.#....#..',
'.#........',
'#....#....',
'......##..',
'##...#..#.',
'#...#.##.#',
'',
'Tile 2111:',
'####..#...',
'#..#...#.#',
'#.#.#.##..',
'##........',
'#...#..#..',
'#.##..#...',
'#.........',
'##.#..#...',
'.##.#.###.',
'#.##.####.',
'',
'Tile 1499:',
'#.####.#..',
'..##.#...#',
'#..#......',
'....#.....',
'.#..##...#',
'#.#...##.#',
'...#.##.##',
'###..#.###',
'.....#....',
'...##.##.#',
'',
'Tile 3461:',
'.#####.#.#',
'#.........',
'..#..#....',
'..#......#',
'###...####',
'...#.##..#',
'.#........',
'#..#....##',
'#...#...##',
'####.....#',
'',
'Tile 1483:',
'.....#.##.',
'##........',
'#.#.....#.',
'##......#.',
'#.....#...',
'..#.......',
'##....#..#',
'##........',
'..#...####',
'......###.',
'',
'Tile 2467:',
'###.#.#...',
'#.#.....#.',
'#...#....#',
'#....#...#',
'...#..#..#',
'##...#....',
'#.#.###...',
'#..##..#.#',
'#.........',
'..######.#',
'',
'Tile 3631:',
'###.#...##',
'.........#',
'#.##..#...',
'...##..#..',
'##..#.#..#',
'#..#.#....',
'......#.#.',
'..........',
'#......##.',
'..##.#....',
'',
'Tile 3767:',
'#...#.#..#',
'..........',
'#......#.#',
'#...#.#..#',
'##.......#',
'..#......#',
'........#.',
'##...##.##',
'#........#',
'....#....#',
'',
'Tile 2381:',
'.#.#.##...',
'#.##.#....',
'...##.#.##',
'#.....#.#.',
'#......#..',
'...#....#.',
'......####',
'#.#.#.....',
'##...##..#',
'...#...#.#',
'',
'Tile 2687:',
'###...####',
'.....#.###',
'..#.#.#.#.',
'##..#...##',
'#.###...#.',
'..#.##..##',
'##.....#..',
'##..#..#.#',
'#...#..#.#',
'#.#..###.#',
'',
'Tile 3719:',
'..####.#..',
'.#......##',
'#......###',
'##....###.',
'.#...##.##',
'.#.....#.#',
'..##..#.#.',
'#......###',
'...#...#..',
'......###.',
'',
'Tile 3259:',
'######.#.#',
'#..#......',
'.........#',
'#.......#.',
'..##...#..',
'##...##.##',
'#......#.#',
'##.......#',
'#.......#.',
'#..##.#.##',
'',
'Tile 3643:',
'###..#..##',
'#.#.#.#...',
'..##....#.',
'##....##..',
'..##......',
'#..#..#.##',
'......##..',
'#.......#.',
'#...##..##',
'#.#..#.###',
'',
'Tile 2767:',
'####....##',
'..........',
'.........#',
'..#....#.#',
'#......###',
'#.##..#..#',
'#.#..#.#..',
'...#.#...#',
'#..####..#',
'##..#####.',
'',
'Tile 2333:',
'###..#.##.',
'..##.....#',
'..#.#..##.',
'#.....#..#',
'....#.#...',
'##...#....',
'#.#......#',
'###.......',
'#...#....#',
'..#..#..##',
'',
'Tile 2857:',
'..#..##..#',
'#.....#...',
'##....#..#',
'#...##....',
'....#.#..#',
'#.#.##....',
'#...##..#.',
'.#...##..#',
'#...#.#...',
'.#.###.#.#',
'',
'Tile 1193:',
'#.#..#.#.#',
'##..####..',
'###..##.#.',
'#.......##',
'###....##.',
'...#...#..',
'#...#....#',
'##.......#',
'#####.##.#',
'..#####.##',
'',
'Tile 2351:',
'.##..#####',
'#.........',
'.#..#.....',
'#.##.#...#',
'..#.#..#..',
'#.###....#',
'###..#....',
'##.......#',
'#...#..#..',
'.....#...#',
'',
'Tile 1129:',
'..##..####',
'.....##..#',
'##........',
'.........#',
'#...#.....',
'....#...##',
'..#....##.',
'..#.....#.',
'..#.......',
'.##.###...',
'',
'Tile 3433:',
'.##..#....',
'...###.###',
'.......##.',
'#..#.#.#.#',
'........#.',
'...###...#',
'...#......',
'.##...###.',
'.#.#..#..#',
'##..##..#.',
'',
'Tile 1091:',
'###.####..',
'.#..#.....',
'##.......#',
'#.#...#...',
'...##.....',
'#..###...#',
'..##...#.#',
'#...#..###',
'.....#...#',
'###.#....#',
'',
'Tile 3407:',
'.####.#...',
'.#..#.#..#',
'..#..#....',
'......#..#',
'.........#',
'#...##...#',
'...#.###.#',
'#....#...#',
'#.....###.',
'.#.#.#.#..',
'',
'Tile 2591:',
'.##..##...',
'..#...##.#',
'...#..####',
'.#....#.##',
'#...##.#..',
'#...#....#',
'#..#.....#',
'#..#.....#',
'..........',
'.#.###.#.#',
'',
'Tile 3613:',
'###.######',
'.#...##..#',
'#.##.....#',
'#.........',
'#...#.....',
'###.....##',
'.#.##.#..#',
'##..#...##',
'####......',
'..#...#...',
'',
'Tile 3967:',
'#.#..#.#..',
'#..#.....#',
'...##...#.',
'.#.##...#.',
'#####..#.#',
'..##.#..#.',
'..........',
'#.#.#..#.#',
'#.#.....##',
'#..#####.#',
'',
'Tile 1999:',
'#.#.#..##.',
'####.##.##',
'..##...#.#',
'....#....#',
'.##.#.#...',
'..........',
'.......##.',
'#.#......#',
'##...#.#.#',
'.#.#.#.#..',
'',
'Tile 2689:',
'.#..#####.',
'.#........',
'..#....#.#',
'#......#.#',
'.#.#..#.##',
'###...#..#',
'...#...#.#',
'##......##',
'......##.#',
'.##.#..##.',
'',
'Tile 3533:',
'.####.#...',
'#........#',
'#......#..',
'.........#',
'#..#.##..#',
'###....#.#',
'...##..#..',
'..#.....#.',
'#...#..###',
'..###.##.#',
'',
'Tile 2267:',
'#.##...#.#',
'#....#....',
'.#.#.##...',
'.#....#.##',
'..#.#.....',
'.##.......',
'##.....#..',
'####....#.',
'......#..#',
'#..##..#.#',
'',
'Tile 2297:',
'###..##...',
'#..##..##.',
'..#....#.#',
'#.#.##...#',
'..#.##..#.',
'...##...#.',
'#...#.....',
'.....#.#.#',
'#..#....#.',
'.###..##..',
'',
'Tile 2711:',
'##..##...#',
'...##....#',
'...#..#.#.',
'#........#',
'...#.....#',
'........##',
'##....##..',
'#.##.....#',
'#.###.....',
'###...#..#',
'',
'Tile 1931:',
'.###...###',
'......#.##',
'....##..##',
'#...#...#.',
'..#..##.#.',
'#.....#..#',
'#...#....#',
'#........#',
'...#..#.#.',
'#.##..###.',
'',
'Tile 1787:',
'#...##..##',
'..#.......',
'#..#.#.#..',
'...#..#..#',
'.##.#..###',
'#.#.#.....',
'..........',
'....##...#',
'..........',
'.#.#...#..',
'',
'Tile 2549:',
'##.#...###',
'.....#...#',
'#......###',
'##.###....',
'#..#....#.',
'##.......#',
'.#........',
'..###...##',
'##..##...#',
'#.##...#.#',
'',
'Tile 2789:',
'#.#.#.#.##',
'#...#.##..',
'.##...#.##',
'#.##.#....',
'...#......',
'###.......',
'#.......##',
'#.#...#..#',
'..#.#....#',
'.##.#..#..',
'',
'Tile 2707:',
'#..#.#...#',
'#.#.#.#...',
'...#..#..#',
'##.#.....#',
'#....#.##.',
'.....#...#',
'#.....#...',
'....#.#...',
'#..###...#',
'##..##.###',
'',
'Tile 3313:',
'###.#..#..',
'.#....#..#',
'...#.....#',
'....#..###',
'....#..#..',
'#..#.#....',
'##.#..##..',
'..#...#.##',
'##..##....',
'.##.###.#.',
'',
'Tile 1607:',
'..#...###.',
'#.....#...',
'#.......##',
'#.....#...',
'###.#.#..#',
'#.#.....#.',
'#..#...###',
'.........#',
'..#.......',
'##.#.#####',
'',
'Tile 3889:',
'###.#...##',
'##.......#',
'....#..#..',
'#.#......#',
'.##......#',
'#...##....',
'#....##..#',
'.......#..',
'#...#...#.',
'##.#####.#',
'',
'Tile 3821:',
'..###.##..',
'........##',
'#..##..#.#',
'.##.#..#.#',
'#....##.##',
'#.....##.#',
'#.....#..#',
'##........',
'#.#..#....',
'##.#.###..',
'',
'Tile 3347:',
'.##..#...#',
'#.#...#...',
'#..#..###.',
'.#......#.',
'#..###.##.',
'......#...',
'##..##.#..',
'.#.###.#..',
'........#.',
'#.###..##.',
'',
'Tile 1907:',
'.#.##...#.',
'#......#..',
'...#......',
'##.......#',
'.#.....#..',
'.#.....###',
'........##',
'.##.#..#.#',
'##.....#..',
'#.########',
'',
'Tile 2903:',
'##.....#.#',
'....#.##..',
'...#.....#',
'.#..#####.',
'.....##.#.',
'.#......#.',
'..........',
'#..#.....#',
'....#...##',
'.#..##..##',
'',
'Tile 1399:',
'#....###.#',
'..#..#####',
'.#....##.#',
'...#...#..',
'#..##.#..#',
'.....#....',
'..#......#',
'........##',
'#..###....',
'#..###.###',
'',
'Tile 1993:',
'###.##..#.',
'##........',
'##..#..##.',
'.........#',
'.........#',
'#..##.#.#.',
'.##.......',
'#..#.....#',
'#.##.#..##',
'##.#.#..#.',
'',
'Tile 3671:',
'...##.#..#',
'##....##.#',
'#..#....##',
'#..#...#.#',
'.#.#.#...#',
'........##',
'..........',
'##.......#',
'#.##....##',
'.#..#..##.',
'',
'Tile 3167:',
'###..##..#',
'.....##...',
'.......#..',
'#...#.#..#',
'.#.##.#..#',
'###....##.',
'##........',
'#.........',
'..#..#....',
'.....##.#.',
'',
'Tile 1109:',
'..#...#..#',
'#..#.#.#..',
'.#........',
'.......#.#',
'#..#..#...',
'.........#',
'##.#......',
'........##',
'#.#.##..#.',
'..#..#.#..',
'',
'Tile 3089:',
'.###.#####',
'#..#..#.#.',
'#......#.#',
'...#.....#',
'.........#',
'.#.#...#..',
'.#..#.#.##',
'.......###',
'.#.#..#.##',
'..#..###..',
'',
'Tile 1051:',
'.....##..#',
'#...##.#..',
'..........',
'..........',
'#.#.##..#.',
'...##...##',
'.##.#####.',
'.#...##..#',
'..#.#...#.',
'#.......##',
'',
'Tile 2113:',
'#...###.##',
'.#.....##.',
'...#....##',
'...##..#..',
'#....#...#',
'..##.#....',
'##....#.#.',
'..#...###.',
'.....#.#.#',
'.##......#',
'',
'Tile 2131:',
'#....#####',
'#.#.......',
'.###.#..##',
'###.##.#..',
'#...#.....',
'.#.#.....#',
'###....#..',
'..#.....##',
'.#...##.##',
'#..###....',
'',
];
console.log(cornerProduct(day20input));

/*
--- Part Two ---
Now, you're ready to check the image for sea monsters.

The borders of each tile are not part of the actual image; start by removing them.

In the example above, the tiles become:

.#.#..#. ##...#.# #..#####
###....# .#....#. .#......
##.##.## #.#.#..# #####...
###.#### #...#.## ###.#..#
##.#.... #.##.### #...#.##
...##### ###.#... .#####.#
....#..# ...##..# .#.###..
.####... #..#.... .#......

#..#.##. .#..###. #.##....
#.####.. #.####.# .#.###..
###.#.#. ..#.#### ##.#..##
#.####.. ..##..## ######.#
##..##.# ...#...# .#.#.#..
...#..#. .#.#.##. .###.###
.#.#.... #.##.#.. .###.##.
###.#... #..#.##. ######..

.#.#.### .##.##.# ..#.##..
.####.## #.#...## #.#..#.#
..#.#..# ..#.#.#. ####.###
#..####. ..#.#.#. ###.###.
#####..# ####...# ##....##
#.##..#. .#...#.. ####...#
.#.###.. ##..##.. ####.##.
...###.. .##...#. ..#..###
Remove the gaps to form the actual image:

.#.#..#.##...#.##..#####
###....#.#....#..#......
##.##.###.#.#..######...
###.#####...#.#####.#..#
##.#....#.##.####...#.##
...########.#....#####.#
....#..#...##..#.#.###..
.####...#..#.....#......
#..#.##..#..###.#.##....
#.####..#.####.#.#.###..
###.#.#...#.######.#..##
#.####....##..########.#
##..##.#...#...#.#.#.#..
...#..#..#.#.##..###.###
.#.#....#.##.#...###.##.
###.#...#..#.##.######..
.#.#.###.##.##.#..#.##..
.####.###.#...###.#..#.#
..#.#..#..#.#.#.####.###
#..####...#.#.#.###.###.
#####..#####...###....##
#.##..#..#...#..####...#
.#.###..##..##..####.##.
...###...##...#...#..###
Now, you're ready to search for sea monsters! Because your image is monochrome, a sea monster will look like this:

                  # 
#    ##    ##    ###
 #  #  #  #  #  #   
When looking for this pattern in the image, the spaces can be anything; only the # need to match. Also, you might need to rotate or flip your image before it's oriented correctly to find sea monsters. In the above image, after flipping and rotating it to the appropriate orientation, there are two sea monsters (marked with O):

.####...#####..#...###..
#####..#..#.#.####..#.#.
.#.#...#.###...#.##.O#..
#.O.##.OO#.#.OO.##.OOO##
..#O.#O#.O##O..O.#O##.##
...#.#..##.##...#..#..##
#.##.#..#.#..#..##.#.#..
.###.##.....#...###.#...
#.####.#.#....##.#..#.#.
##...#..#....#..#...####
..#.##...###..#.#####..#
....#.##.#.#####....#...
..##.##.###.....#.##..#.
#...#...###..####....##.
.#.##...#.##.#.#.###...#
#.###.#..####...##..#...
#.###...#.##...#.##O###.
.O##.#OO.###OO##..OOO##.
..O#.O..O..O.#O##O##.###
#.#..##.########..#..##.
#.#####..#.#...##..#....
#....##..#.#########..##
#...#.....#..##...###.##
#..###....##.#...##.##.#
Determine how rough the waters are in the sea monsters' habitat by counting the number of # that are not part of a sea monster. In the above example, the habitat's water roughness is 273.

How many # are not part of a sea monster?
*/
function removeBorder(tileContent) {
  return tileContent
    .slice(1, tileContent.length - 1)
    .map( l => l.slice(1, l.length - 1) );
}
console.assert(removeBorder(['####','#ab#','#cd#','####']).join() === 'ab,cd');

function transpose(tileContent) {
  var result = [];
  for (var i = 0; i < tileContent[0].length; i++) {
    result.push(tileContent.map( l => l[i] ).join(''));
  }
  return result;
}
console.assert(transpose(['abc', 'def']).join() === 'ad,be,cf');

function reverseCopy(arr) {
  if (typeof arr === "string") {
    return arr.split('').reverse().join('');
  }
  return arr.slice().reverse();
}
console.assert(reverseCopy('abc') === 'cba');
console.assert(reverseCopy([1,2,3]).join() === '3,2,1');

function flipx(tileContent) {
  return tileContent.map(reverseCopy);
}
console.assert(flipx(['abc','def']).join() === 'cba,fed');

function flipy(tileContent) {
  return reverseCopy(tileContent);
}
console.assert(flipy(['abc','def']).join() === 'def,abc');

function everywhere(original) {
  return [
    original, // N
    flipx(original), // -N
    flipx(transpose(original)), // E
    flipy(flipx(transpose(original))), // -E
    flipy(original), // S
    flipy(flipx(original)), // -S
    transpose(original), // W
    flipy(transpose(original)), // -W
  ];
}
console.assert(everywhere(['ABC','def']).join(';') === "ABC,def;CBA,fed;dA,eB,fC;fC,eB,dA;def,ABC;fed,CBA;Ad,Be,Cf;Cf,Be,Ad");

// target must be smaller than image, and x, y remain in-bounds
function highlightTarget(target, image, x, y) {
  // ensure we have an editable image, not immutable strings
  var result = (typeof image[0] === "string") ? image.map(l => l.split('')) : image;
  for (var j = 0; j < target.length; j++) {
    for (var i = 0; i < target[j].length; i++) {
      if (target[j][i] === '#') {
        result[y+j][x+i] = 'O';
      }
    }
  }
  return result;
}
console.assert(highlightTarget([' # #','# # '], ['0123456789','abcdefghij','ABCDEFGHIJ'], 3, 1)
            .map(l=>l.join('')).join('\n') ===  ['0123456789','abcdOfOhij','ABCOEOGHIJ'].join('\n'));

function isImageMatch(target, image, x, y) {
  for (var j = 0; j < target.length; j++) {
    for (var i = 0; i < target[j].length; i++) {
      if (target[j][i] === '#' &&
          image[y+j][x+i] !== 'O' &&
          image[y+j][x+i] !== '#') {
        return false;
      }
    }
  }
  return true;
}
console.assert( isImageMatch([' #','##'], ['ab#Oe','f#Oij'], 1, 0));
console.assert(!isImageMatch([' #','##'], ['ab#Oe','f#Oij'], 2, 0));

function highlightAll(target, image) {
  // ensure we have an editable image, not immutable strings
  var result = (typeof image[0] === "string") ? image.map(l => l.split('')) : image;
  for (var t of everywhere(target)) {
    for (var y=0; y <= image.length-t.length; y++) {
      for (var x=0; x <= image[y].length-t[0].length; x++) {
        if (isImageMatch(t, image, x, y)) {
          highlightTarget(t, result, x, y);
        }
      }
    }
  }
  return result;
}
function countWaves(image) {
  return [...image.join('').match(/#/g)].length;
}
console.assert(countWaves(highlightAll(['###','#  '], [
  '### ### ## ## #    #',
  '#  #  # #   # #  # #',
  ' ###    # # # ## ###'])) === 1);

var monster = [
'                  # ', 
'#    ##    ##    ###',
' #  #  #  #  #  #   ',
];
console.assert(countWaves(highlightAll(monster, [
'.#.#..#.##...#.##..#####',
'###....#.#....#..#......',
'##.##.###.#.#..######...',
'###.#####...#.#####.#..#',
'##.#....#.##.####...#.##',
'...########.#....#####.#',
'....#..#...##..#.#.###..',
'.####...#..#.....#......',
'#..#.##..#..###.#.##....',
'#.####..#.####.#.#.###..',
'###.#.#...#.######.#..##',
'#.####....##..########.#',
'##..##.#...#...#.#.#.#..',
'...#..#..#.#.##..###.###',
'.#.#....#.##.#...###.##.',
'###.#...#..#.##.######..',
'.#.#.###.##.##.#..#.##..',
'.####.###.#...###.#..#.#',
'..#.#..#..#.#.#.####.###',
'#..####...#.#.#.###.###.',
'#####..#####...###....##',
'#.##..#..#...#..####...#',
'.#.###..##..##..####.##.',
'...###...##...#...#..###',
])) === 273);

function getFirstCorner(tileEdgesMap, edgeTilesMap) {
  return [...tileEdgesMap.keys()].find(k=>isCorner(k, tileEdgesMap, edgeTilesMap));
}
function getNeighbors(tileId, tileEdgesMap, edgeTilesMap) {
  var neighborSets = tileEdgesMap.get(tileId).map(e => edgeTilesMap.get(e));
  var result = [0,0,0,0]; // N,E,S,W
  for (var i = 0; i < neighborSets.length; i++) {
    for (var n of neighborSets[i]) {
      if (n !== tileId) {
        result[Math.floor(i/2)] = n;
      }
    }
  }
  return result;
}
function getNeighborsByContent(tileId, tileContent, edgeTilesMap) {
  var result = [0,0,0,0]; // N,E,S,W
  var edges = getEdges(tileContent);
  var neighborSets = edges.map(e => edgeTilesMap.get(e));
  for (var i = 0; i < neighborSets.length; i++) {
    for (const n of neighborSets[i]) {
      if (n !== tileId) {
        result[i] = n;
      }
    }
  }
  return result;
}

function makeIdGrid(tileEdges, edgeTiles, tileContent) {
  var idGrid = [];
  var prevIdRow;
  var idRow = [getFirstCorner(tileEdges, edgeTiles)];
  while (idRow[0] !== 0) {
    var westTarget = 0;
    var x = 0;
    var northTarget = prevIdRow ? prevIdRow[x] : 0;
    var targetId = idRow[x];
    var nextIdRow = [];
    while (true) {
      var targetTile = tileContent.get(targetId);
      if (targetTile === undefined) { console.log('Unable to find ' + targetId); }
      var reorientedTile = everywhere(targetTile).find(c => { 
                          var neighbors = getNeighborsByContent(targetId, c, edgeTiles);
                          return neighbors[0] === northTarget && neighbors[3] === westTarget;
                        });
      if (reorientedTile === undefined) { console.log('Unable to orient ' + targetId + ' for neighbors n=' + northTarget + ', w=' + westTarget ); } else
      tileContent.set(targetId, reorientedTile);
      var neighbors = getNeighborsByContent(targetId, reorientedTile, edgeTiles);
      // fill in next row with south neighbor
      nextIdRow.push(neighbors[2]);

      // normally continue east
      westTarget = targetId;
      targetId = neighbors[1];
      if (targetId === 0) { 
        // no eastern neighbor indicates the end of the row
        break;
      }

      if (prevIdRow === undefined) {
        // build first row
        idRow.push(targetId);
      } else {
        // match previous row
        northTarget = prevIdRow[++x];
        // double-check previous prediction
        if (targetId !== idRow[x]) { 
          console.log('Unexpected neighbor! South predicted ' + idRow[x] + ', but East produced ' + targetId);
        }
      }
    } // wend this row
    idGrid.push(idRow);
    prevIdRow = idRow;
    idRow = nextIdRow;
  } // wend last grid row
  return idGrid;
} // makeIdGrid
var testIdGrid = makeIdGrid(testTileEdges, testEdgeTiles, testTileContent);

function joinGrid(idGrid, tileContent) {
  var result = [];
  for (const gridRow of idGrid) {
    var rowContents = gridRow.map(id => removeBorder(tileContent.get(id)));
    for (var i = 0; i < rowContents[0].length; i++) {
      var line = "";
      for (const row of rowContents) {
        line += row[i];
      }
      result.push(line);
    }
  }
  return result;
}

function part2(input) {
  var tileContent = parseTiles(input);
  var tileEdges = makeTileEdgesMap(tileContent);
  var edgeTiles = countEdges(tileEdges);
  var idGrid = makeIdGrid(tileEdges, edgeTiles, tileContent);
  return countWaves(highlightAll(monster, joinGrid(idGrid, tileContent)));
}

console.assert(part2(day20test) === 273);
console.log(part2(day20input));
